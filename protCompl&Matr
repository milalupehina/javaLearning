/*import java.util.Arrays;
import java.util.Scanner;


public class Complex {

  private double re = 0;
  private double im = 0;
  private double r = 0;
  private double ang = 0;
  private int typo = 0;
*/
/*  public void action(int num) {


    Scanner sc = new Scanner(System.in);
    if (num == 0 || num == 1 || num == 2 || num == 3) {
      System.out.println("enter second number \ntype first:\n0 - algebraic\n1 - trigonometric");
      int t2 = sc.nextInt();

      Complex two = new Complex(t2);
      }

    switch (num) {
      case 0: //add
        if (one.typo == 0 && one.typo == two.typo) { //both algebraic
          Complex three = one.add(two);
  //        System.out.println();

        } else if (one.typo == 1 && one.typo == two.typo) { //both trigonometric;
          one.toAlgebraic();
          two.toAlgebraic();
          Complex three = one.add(two);
//          System.out.println();

        } else if (one.typo == 0 && one.typo != two.typo) { //only first algebraic
          two.toAlgebraic();
          Complex three = one.add(two);
//          System.out.println();

        } else if (one.typo == 1 && one.typo != two.typo) { // only secind algebraic
          one.toAlgebraic();
          Complex three = one.add(two);
//          System.out.println();
        }

        break;
      case 1: //substract
        if (one.typo == 0 && one.typo == two.typo) {
          Complex three = one.substract(two);
//          System.out.println();

        } else if (one.typo == 1 && one.typo == t2) {
          one.toAlgebraic();
          two.toAlgebraic();
          Complex three = one.substract(two);
//          System.out.println();

        } else if (one.typo == 0 && one.typo != t2) {
          two.toAlgebraic();
          Complex three = one.substract(two);
//          System.out.println();

        } else if (one.typo == 1 && one.typo != t2) {
          one.toAlgebraic();
          Complex three = one.substract(two);
//          System.out.println();

        }
        break;
      case 2: //multiply
        if (one.typo == 0 && one.typo == t2) {
          Complex three = one.multiply(two);
//          System.out.println();
        } else if (one.typo == 1 && one.typo == t2) {
          one.toAlgebraic();
          two.toAlgebraic();
          Complex three = one.multiply(two);
//          System.out.println();

        } else if (one.typo == 0 && one.typo != t2) {
          two.toAlgebraic();
          Complex three = one.multiply(two);
//          System.out.println();

        } else if (one.typo == 1 && one.typo != t2) {
          one.toAlgebraic();
          Complex three = one.multiply(two);
//          System.out.println();
        }
        break;
      case 3: //divide
        if (one.typo == 0 && one.typo == t2) {
        Complex three = one.multiply(two);
//          System.out.println();
      } else if (one.typo == 1 && one.typo == t2) {
        one.toAlgebraic();
        two.toAlgebraic();
        Complex three = one.multiply(two);
//          System.out.println();


      } else if (one.typo == 0 && one.typo != t2) {
        two.toAlgebraic();
        Complex three = one.multiply(two);
//          System.out.println();

      } else if (one.typo == 1 && one.typo != t2) {
        one.toAlgebraic();
        Complex three = one.multiply(two);
//          System.out.println();
     }
        break;
      case 4: //type
        if (one.typo == 0) {
            one.toTrigonometric();
        } else if (one.typo == 1) {
            one.toAlgebraic();
        }
        //          System.out.println();

        break;
      case 5: //print
        break;
      default:
        System.out.println("wrong acton");
        break;

    }
}//*/
/*
  public Complex (int type) {
    if(type == 0) {//algebraic
      System.out.println("enter real part");
      this.re = sc.nextDouble();
      System.out.println("enter imaginery part");
      this.im = sc.nextDouble();
      this.r = 0;
      this.ang = 0;
      this.typo = type;


    } else if (type == 1) { // trigonometric
      this.re = 0;
      this.im = 0;
      this.typo = type;

      System.out.println("enter radius");
      this.r = sc.nextDouble();
      System.out.println("enter angle");
      this.ang = sc.nextDouble();


    } else {
      System.out.println("wrong type");
    }
  }

  public Complex add (Complex b) {
    Complex c = new Complex(re + b.re, im + b.im, 0, 0, 0);
    return c;
  }

  public Complex substract (Complex b) {
    Complex c = new Complex(re - b.re, im - b.im, 0, 0, 0);
    return c;
}

  public Complex multiply (Complex b) {*/
    /*
      a      b
    (a+bi)*(c+di) =
    = ac+bci+adi+bdii =
    = (ac+bdii) + (bc+ad)i =
    = (ac-bd)+(bc+ad)i
    */
    /*
    Complex c = new Complex(re*b.re-im*b.im, im*b.re+re*b.im, 0, 0, 0);
    return c;
  }

  public Complex divide (Complex b) {*/
    /*
    z= x+yi; z* = x-yi;

    a+bi   (a+bi)(c-di)     ac+bd       bc - ad
    ---- = ------------ = -------- + (---------)i
    c+di   (c+di)(c-di)   c^2+d^2      c^2+d^2
    */

    /*
    Complex c = new Complex((re*b.re + im*b.im) / (b.re*b.re+b.im*b.im), (im*b.re - re*b.im)/ (b.re*b.re+b.im*b.im), 0, 0, 0);
    return c;
  }

  public Complex toTrigonometric () {*/
  /*
  z = a+bi; r = |z| = sqrt(a^2+ b^2); phi = arg z

  cos phi = a/sqrt(a^2+b^2)
  sin       b

  cos phi = a/r
  sin       b

  a = r*cos phi
  b =   sin

  z = a+bi = r(cos phi + sin phi)
   */
/*
   this.r = sqrt(this.re*this.re + this.im*this.im);
   this.ang = acos(this.re/this.r);
   this.re = 0;
   this.im = 0;
   this.typo = 1;
  }

  public Complex toAlgebraic () {*/
    /*
    z = a+bi; r = |z| = sqrt(a^2+ b^2); phi = arg z

    cos phi = a/sqrt(a^2+b^2)
    sin       b

    cos phi = a/r
    sin       b

    a = r*cos phi
    b =   sin

    z = a+bi = r(cos phi + sin phi)
     */
     /*
    this.re = this.r * cos(this.ang);
    this.im = this.r * sin(this.ang);
    this.r = 0;
    this.ang = 0;
    this.typo = 0;
  }

  public void print(Complex a) {
      if (a.typo == 0) {

          System.out.println("type: algebraic");
          System.out.println("real part: " + a.re);
          System.out.println("imaginary part: " + a.im);
          if (a.im < 0) {
              System.out.println("full record: " + a.re + " + (" + a.im + ")");
          } else {
              System.out.println("full record: " + a.re + " + " + a.im);
          }

      } else if (a.typo == 1) {
          System.out.println("type: trigonometric");
          System.out.println("radius - vector: " + a.r);
          System.out.println("angle: " + a.ang);
          System.out.println("full record: " + a.r + "( cos(" + a.ang + ") + sin(" + a.ang + "))");

      }
  }
*/
  /*private void printDouble (double[] num) {
    if (num[1] < 0) {
      System.out.print("num is"+num[0]+" - "+num[1]);
    }
    System.out.print("num is"+num[0]+" + "+num[1]);
    return;
  }*/
  /*

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    System.out.println("enter the type of number: \n0 - algebraic\n1 - trigonometric");
    int t1 = sc.nextInt();

    Complex one = new Complex(t1);

    System.out.println("what would you like to do with it?\n0 - add\n1 -substract\n2 - multiply\n3 - divide\n4 - change type\n5 - print it");
    int act = sc.nextInt();

    action(act);*/

/*

    double re1, im1, re2, re2;
    double[] num1 = new double[2];

    num1 = create(re1, im1);
    System.out.print("created first ");
    printDouble(num1);

    double[] num2 = new double[2];
    num2 = create(re2, im2);
    System.out.print("created second ");
    printDouble(num2);

    double[] numAdd  = new double[2];
    numAdd = add(num1, num2);
    System.out.print("added ");
    printDouble(numAdd);

    double[] numSub = new double[2];
    numSub = substract(num1, num2);
    System.out.print("substeacted ");
    printDouble(numSub);

    double[] numMult = new double[2];
    numMult = multiply(num1, num2);
    System.out.print("multiplied ");
    printDouble(numMult);


    double[] numDiv = new double[2];
    numDiv = divide(num1, num2);
    System.out.print("divided ");
    printDouble(numDiv);


    double[] num2Trig = new double[2];
    num2Trig = toTrigonometric(num1);
    printInt(num1);
    System.out.print(" -> "+num2Trig[0]+"(cos"+num2Trig[1]+" + sin"+num2Trig[1]+")");


    double[] num2Alg = new double[2];
    num2Alg =toAlgebraic(num2);
    System.out.print(num2[0]+"(cos"+num2[1]+" + sin"+num2[1]+") -> ");
    printInt(num2Alg);
*/
/*
  }

}*/



/*import java.util.Scanner;

public class Matrix {
    private double re;
    private double im;
    private int type;

    //create
    //add
    //multiply
    //transpond
    //determiner


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n,m;

        Matrix[][] matr;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                matr[i][j] = sc.nextInt();
            }

        }
    }

}*/


/*
import java.util.Scanner;

public class Matrix {
    private double[][] matrix;
    private static final Scanner input = new Scanner(System.in);

    // constructs a rows x cols matrix
    // throws IllegalArgumentException if either rows or cols is <= 0
    // asks user for input about the elements
    public Matrix(int rows, int cols) {
        this(rows, cols, false);
    }

    // constructs a rows x cols matrix
    // throws IllegalArgumentException if either rows or cols is <= 0
    // if !leaveEmpty, asks user for input about the elements
    private Matrix(int rows, int cols, boolean leaveEmpty) {
        if (rows <= 0 || cols <= 0) {
            throw new IllegalArgumentException("Invalid dimensions");
        }
        matrix = new int[rows][cols];
        if (!leaveEmpty) {
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    System.out.print("number[" + (i + 1) + "][" + (j + 1) + "]: ");
                    matrix[i][j] = input.nextInt();
                }
            }
        }
        System.out.println();
    }


    // returns a Matrix result from multiplying this one with the other one
    // returns null if the multiplication is invalid
    public Matrix multiply(Matrix other) {
        if (matrix[0].length != other.matrix.length) {
            return null;
        }
        Matrix result = new Matrix(matrix.length, other.matrix[0].length, true);
        for (int r = 0; r < result.matrix.length; r++) {
            for (int c = 0; c < result.matrix[0].length; c++) {
                int sum = 0;
                for (int i = 0; i < matrix[0].length; i++) {
                    sum += matrix[r][i] * other.matrix[i][c];
                }
                result.matrix[r][c] = sum;
            }
        }
        return result;
    }

    // returns the determinant of the Matrix
    // throws IllegalArgumentException if the Matrix is not square
    public int det(){
        if(matrix.length != matrix[0].length){
            throw new IllegalArgumentException("Must be a square matrix");
        }
        return det(matrix);
    }

    // returns the determinant of the given square matrix
    private int det(int[][] curMatrix){
        if(curMatrix.length == 2){
            return curMatrix[0][0]*curMatrix[1][1] - curMatrix[0][1]*curMatrix[1][0];
        }
        int negOrPos = 1;
        int sum = 0;
        for(int i = 0; i < curMatrix.length; i++){
            int[][] smaller = new int[curMatrix.length-1][curMatrix.length-1];
            int r = 0;
            int c = 0;
            for(int row = 1; row < curMatrix.length; row++){
                for(int col = 0; col < curMatrix.length; col++){
                    if(col != i){
                        smaller[r][c] = curMatrix[row][col];
                        c++;
                    }
                }
                r++;
                c = 0;
            }
            int detSmaller = det(smaller);
            sum += negOrPos*curMatrix[0][i]*detSmaller;
            negOrPos = -1*negOrPos;
        }
        return sum;
    }


    //prints the inverse of the current Matrix
    //asks user for input on what actions they want to do to achieve the inverse
    //does not alter the current Matrix
    //throws IllegalArgumentException if Matrix is not square
    //prints "Singular matrix" if not invertible and returns null
    public void inverse(){
        if(matrix.length != matrix[0].length){
            throw new IllegalArgumentException("must be square");
        }
        double det = det(matrix);
        if(det == 0){
            System.out.println("Singular matrix");
            return;
        }
        Matrix result = new Matrix(matrix.length, 2*matrix[0].length, true);
        for(int r = 0; r < matrix.length; r++){
            for(int c = 0; c < matrix[0].length; c++){
                result.matrix[r][c] = matrix[r][c];
            }
        }
        for(int i = 0; i < matrix.length; i++){
            result.matrix[i][i+matrix.length] = 1;
        }
        eliminate(result, matrix.length);
        double[][] inverse = new double[matrix.length][matrix.length];
        for(int r = 0; r < inverse.length; r++){
            double scalar = result.matrix[r][r];
            for(int c = 0; c < inverse[0].length; c++){
                inverse[r][c] = result.matrix[r][c + matrix[0].length]/scalar;
            }
        }
        //prints inverse
        System.out.println("\nInverse:");
        for (int r = 0; r < matrix.length; r++) {
            System.out.print("[");
            for (int c = 0; c < matrix[0].length - 1; c++) {
                System.out.print(inverse[r][c] + ", ");
            }
            System.out.println(inverse[r][inverse[0].length - 1] + "]");
        }

    }

    //performs Gauss-Jordan elimination on the given Matrix
    //which has "colsBeforeAugment" cols before the augmented part of the Matrix
    //asks user for input on what actions they want to do to proceed
    private void eliminate(Matrix result, int colsBeforeAugment){
        System.out.println(result.augmentedMatrix(matrix.length));
        System.out.print("What do you want to do? ");
        System.out.print("(M)ultily/(D)ivide a row by a scalar, (S)wap two rows"
                + ", (C)lear a column, (Q)uit: ");
        String userInput = input.next();
        char response = Character.toLowerCase(userInput.charAt(0));
        int pivot = 0;
        while(response != 'q'){
            if(response == 'm' || response == 'd'){
                int row = result.getRow();
                System.out.print("Which scalar: ");
                double scalar = input.nextDouble();
                if(response == 'd'){
                    scalar = 1/scalar;
                }
                for(int c = 0; c < result.matrix[row].length; c++){
                    result.matrix[row][c] *= scalar;
                }
            } else if(response == 's'){
                int row1 = result.getRow();
                int row2 = result.getRow();
                int[] temp = result.matrix[row1];
                result.matrix[row1] = result.matrix[row2];
                result.matrix[row2] = temp;
            } else if(response == 'c'){
                if(pivot >= result.matrix.length){
                    System.out.println("Cannot clear anymore");
                    continue;
                }
                int pivotPoint = result.matrix[pivot][pivot];
                if(pivotPoint == 0){
                    System.out.println("Cannot pivot on a 0");
                } else {
                    for(int row = 0; row < result.matrix.length; row++){
                        if(row != pivot){
                            int cur = result.matrix[row][pivot];
                            if(cur != 0){
                                for(int col = 0; col < result.matrix[0].length; col++){
                                    result.matrix[row][col] = cur*result.matrix[pivot][col]
                                            - pivotPoint*result.matrix[row][col];
                                }
                            }
                        }
                    }
                    pivot++;
                }
            }

            System.out.println(result.augmentedMatrix(colsBeforeAugment));
            System.out.print("What do you want to do? ");
            System.out.print("(M)ultily/(D)ivide a row by a scalar, (S)wap two rows"
                    + ", (C)lear a column, (Q)uit: ");
            userInput = input.next();
            response = Character.toLowerCase(userInput.charAt(0));
        }
    }

    //prompts the user for a row and keeps prompting while the input is invalid
    //returns (row - 1) when 1 <= user-chosen row <= # of rows
    //so the user doesn't need to know about 0-based indexing
    private int getRow(){
        System.out.print("Which row: ");
        int row = input.nextInt();
        while(row < 1 || row > matrix.length){
            System.out.print("Which row: ");
            row = input.nextInt();
        }
        return row - 1;
    }

    //returns a String representation of an augmented Matrix where there are
    //leftCols cols before the augmentation starts
    //throws IllegalArgumentException if leftCols > cols in Matrix
    private String augmentedMatrix(int leftCols){
        if(leftCols >= matrix[0].length){
            throw new IllegalArgumentException();
        }
        String result = "";
        for (int r = 0; r < matrix.length; r++) {
            result += "[";
            for (int c = 0; c < leftCols - 1; c++) {
                result += matrix[r][c] + ", ";
            }
            result += matrix[r][leftCols - 1] + "|";
            for(int c = leftCols; c < matrix[0].length - 1; c++){
                result += matrix[r][c] + ", ";
            }
            result += matrix[r][matrix[0].length - 1] + "]\n";
        }
        return result;
    }

    // returns a String representation of the Matrix
    @Override
    public String toString() {
        String result = "";
        for (int r = 0; r < matrix.length; r++) {
            result += "[";
            for (int c = 0; c < matrix[0].length - 1; c++) {
                result += matrix[r][c] + ", ";
            }
            result += matrix[r][matrix[0].length - 1] + "]\n";
        }
        return result;
    }
}


*/

/*
import java.util.Scanner; //подключение библиотеки Java для ввода данных с клавиатуры
import java.util.Random; //подключение библиотеки Java для генерации случайных чисел
public class SortLab {
	//главная функция, тестирующая работоспособность методов сортировки
	public static void main(String[] args)  {

		int n; // размерность массива
		int[] resultMas; // отсортированный массив

		//Ввод размерности массива с клавиатуры
		Scanner input=new Scanner(System.in); // создание сканера, считыающего данные из консоли
		System.out.println("Input the array length:"); //вывод сообщения на консоль
		String  s=input.nextLine(); //считываем количество элементов, введенное с клавиатуры

		//проверяем, является ли строка числом
		try {
            n = Integer.parseInt(s);//попытаться преобразовать s в integer и присвоить n
        } catch (Exception e) { //если произошла ошибка
        	System.out.println("The array length should be integer!"); // Вывод сообщения об ошибке
            return;//выход из программы
        	}
		//проверяем, чтобы длина была больше 0
		if (n<=0) {
			System.out.println("The array length should be more than 0!"); // Вывод сообщения об ошибке
            return;//выход из программы
        	}
		int[] mas = new int[n]; // создаем исходный массив требуемой длины
		//инициализация массива случаными числами
		RandomInit(mas,n);
		System.out.println("");System.out.println("The initial array:"); //Вывод исходного массива на экран
		ShowArray(mas);

		long t1Bubble = System.nanoTime();//замеряем время до BubbleSort
		int[] sortedMas = BubbleSort(mas);
		long t2Bubble = System.nanoTime();//замеряем время после BubbleSort
		System.out.println("");System.out.println("The bubble sorted array:"); //проверяем, отсортировался ли массив
		ShowArray(sortedMas);

		long t1Selection = System.nanoTime();//замеряем время до SelectionSort
		sortedMas = SelectionSort(mas);
		long t2Selection = System.nanoTime();//замеряем время после SelectionSort
		System.out.println("");System.out.println("The selection sorted array:"); //проверяем, отсортировался ли массив
		ShowArray(sortedMas);

		long t1QuickSort = System.nanoTime();//замеряем время до QuickSort
		sortedMas = QuickSort(mas);
		long t2QuickSort = System.nanoTime();//замеряем время после QuickSort
		System.out.println("");System.out.println("The quick sorted array:"); //проверяем, отсортировался ли массив
		ShowArray(sortedMas);

		//Вывод результатов
		System.out.println("--------------------------------------------------------------------------------------------");
		System.out.println("Массив размерности "+n+":");
		System.out.println("BubbleSort отсортировал за: "+String.format("%,12d",t2Bubble-t1Bubble) + " ns");
		System.out.println("SelectionSort отсортировал за: "+String.format("%,12d",t2Selection-t1Selection) + " ns");
		System.out.println("QuickSort отсортировал за: "+String.format("%,12d",t2QuickSort-t1QuickSort) + " ns");
	}

	//Метод пузырьковой сортировки
	public static int[] BubbleSort(int[] mas) {
		//ваша реализация пузырьковой сортировки

      boolean swapped = true;
      int j = 0;
      int tmp;
      while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < mas.length - j; i++) {
                  if (mas[i] > mas[i + 1]) {
                        tmp = mas[i];
                        mas[i] = mas[i + 1];
                        mas[i + 1] = tmp;
                        swapped = true;
                  }
            }
      }
}
{
		return mas;
	}

	//Метод сортировки выборки
	public static int[] SelectionSort(int[] mas) {
		//ваша реализация сортировки вставками

        for (int i = 0; i <mas.length - 1; i++)
        {
            int index = i;
            for (int j = i + 1; j < mas.length; j++)
                if (mas[j] < mas[index])
                    index = j;

            int smallerNumber = mas[index];
            mas[index] = mas[i];
            mas[i] = smallerNumber;
        }
        {
        return mas;
    }
	}
    public static void main(String a[]){

        int[] mas1 = {10,34,2,56,7,67,88,42};
        int[] mas2 = SelectionSort (mas1);
        for(int i:mas2){
            System.out.print(i);
            System.out.print(", ");
        }
    }
{
		return mas;
	}

	//Метод сортировки выборки
	public static int[] QuickSort(int[] mas) {
		//ваша реализация быстрой сортировки


public class QuickSortExample {
    public static int ARRAY_LENGTH = 30;
    private static int[] array = new int[ARRAY_LENGTH];
    private static Random generator = new Random();

    public static void initArray() {
        for (int i=0; i<ARRAY_LENGTH; i++) {
            array[i] = generator.nextInt(100);
        }
    }

    public static void printArray() {
        for (int i=0; i<ARRAY_LENGTH-1; i++) {
            System.out.print(array[i] + ", ");
        }
        System.out.println(array[ARRAY_LENGTH-1]);
    }

    public static void quickSort() {
        int startIndex = 0;
        int endIndex = ARRAY_LENGTH - 1;
        doSort(startIndex, endIndex);
    }

    private static void doSort(int start, int end) {
        if (start >= end)
            return;
        int i = start, j = end;
        int cur = i - (i - j) / 2;
        while (i < j) {
            while (i < cur && (array[i] <= array[cur])) {
                i++;
            }
            while (j > cur && (array[cur] <= array[j])) {
                j--;
            }
            if (i < j) {
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                if (i == cur)
                    cur = j;
                else if (j == cur)
                    cur = i;
            }
        }
        doSort(start, cur);
        doSort(cur+1, end);
    }

    public static void main(String[] args) {
        initArray();
        printArray();
        quickSort();
        printArray();
    }
}
{

		return mas;
	}

	//метод инициализирует массив случайными числами
	public static void RandomInit(int[] mas, int n) {
		 Random rand = new Random(); // создание объекта для генерации случайных чисел
		 for (int i=0; i<n; i++) {
			 mas[i] = rand.nextInt(1000); // присваивание i-му элементу массива случайного числа в диапазоне от 0 до 1000
		 }
	}

	//метод выводит массив на экран
	public static void ShowArray(int[] mas) {
		int i=0;

		while (i<mas.length){
			System.out.print(mas[i]);
			for (int j=i+1;j<i+16; j++) {
				if(j<mas.length) {
					System.out.print("\t"+mas[j]);
					}
			}
			System.out.println("");
			i+=11;
		}
	}

}

 
*/
